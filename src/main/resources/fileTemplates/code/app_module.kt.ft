package ${PACKAGE_NAME}.di

import androidx.lifecycle.SavedStateHandle
import ${PACKAGE_NAME}.data.repository.MainRepositoryImpl
<#if IS_KTOR_ENABLE>
import ${PACKAGE_NAME}.data.source.remote.MainService
</#if>
import ${PACKAGE_NAME}.domain.repository.MainRepository
${VIEW_MODEL_IMPORTS}
<#if IS_KTOR_ENABLE>
import io.ktor.client.HttpClient
import io.ktor.client.plugins.contentnegotiation.ContentNegotiation
import io.ktor.client.plugins.defaultRequest
import io.ktor.client.request.accept
import io.ktor.http.ContentType
import io.ktor.http.contentType
import io.ktor.serialization.kotlinx.json.json
import kotlinx.serialization.json.Json
</#if>
import org.koin.core.context.startKoin
import org.koin.core.module.dsl.factoryOf
import org.koin.dsl.module

val dataModule = module {
<#if IS_KTOR_ENABLE>
    single {
        HttpClient {
            defaultRequest {
                contentType(ContentType.Application.Json)
                accept(ContentType.Application.Json)
            }

            install(ContentNegotiation) {
                json(
                    Json {
                        prettyPrint = true
                        ignoreUnknownKeys = true
                    }
                )
            }
        }
    }
    single<MainService> { MainService(get()) }
</#if>
<#if IS_KTOR_ENABLE>
    single<MainRepository> { MainRepositoryImpl(get()) }
<#else>
    single<MainRepository> { MainRepositoryImpl() }
</#if>
    single { SavedStateHandle() }
}

val viewModelModule = module {
${VIEW_MODEL_MODULE}
}

fun initKoin() {
    startKoin {
        modules(
            dataModule,
            viewModelModule,
        )
    }
}